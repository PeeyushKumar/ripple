{"version":3,"sources":["components/Help.jsx","components/Panel.jsx","components/Node.jsx","components/Board.jsx","App.js","index.js"],"names":["Help","props","Modal","show","onHide","closeHelp","size","aria-labelledby","centered","Header","Title","id","Body","Footer","Button","onClick","Panel","className","this","showHelp","startSearching","reset","Component","Node","row","col","isStart","isEnd","isWall","isVisited","isPicked","isPath","onMouseUp","handleOnMouseUp","onMouseDown","handleOnMouseDown","onMouseEnter","handleOnMouseEnter","Board","componentDidMount","createGrid","window","addEventListener","width","innerWidth","height","innerHeight","ratio","noOfRows","Math","floor","noOfCols","startCol","startRow","endCol","endRow","grid","rowIdx","nodeIdx","node","parentRow","parentCol","push","setState","state","searching","drawingWall","resetSearch","isValidIndex","setTimeout","explore","fromRow","fromCol","currentNode","tracking","track","path","unshift","travel","i","length","makePath","savedRow","savedCol","console","log","map","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7970075.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst Help = (props) => {\r\n    return(\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.closeHelp}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    <h2>Ripple</h2>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h4>Move Tiles</h4>\r\n                <p>Click and Drag Start or End Tile to move them to a new location.</p>\r\n                <h4>Add Walls</h4>\r\n                <p>Drag across blank spaces to create a wall.</p>\r\n                <h4>Enjoy</h4>\r\n                <p>Hit go to start the simulation.</p>\r\n            </Modal.Body>\r\n            \r\n            <Modal.Footer>\r\n                <Button onClick={props.closeHelp}>Close</Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Help;","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n\r\n                <Button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.showHelp}\r\n                >Help</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-success btn-xs-block\"\r\n                    onClick={this.props.startSearching}\r\n                >Go</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={this.props.reset}\r\n                >Reset</Button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;\r\n","import React, {Component} from 'react'\r\n\r\nclass Node extends Component {\r\n    \r\n    render() {\r\n        const {row, col, isStart, isEnd, isWall, isVisited, isPicked, isPath} = this.props;\r\n\r\n        let className = \"node\";\r\n\r\n        if (isStart) {\r\n            className += \" node-start\";\r\n        }\r\n        if (isEnd) {\r\n            className += \" node-end\";\r\n        }\r\n        if (isWall) {\r\n            className += \" node-wall\";\r\n        }\r\n        if (isVisited) {\r\n            className += \" node-visited\";\r\n        }\r\n        if (isPicked) {\r\n            className += \" node-picked\";\r\n        }\r\n        if (isPath) {\r\n            className += \" node-path\";\r\n        }\r\n\r\n        return(\r\n            <div\r\n                onMouseUp={() => this.props.handleOnMouseUp(row, col)}\r\n                onMouseDown={() => this.props.handleOnMouseDown(row, col)}\r\n                onMouseEnter={() => this.props.handleOnMouseEnter(row, col)}\r\n                className={className}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React, {Component} from 'react';\r\nimport Help from './Help'\r\nimport Panel from './Panel';\r\nimport Node from './Node';\r\n\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            grid: [[]],\r\n            noOfRows: null,\r\n            noOfCols: null,\r\n\r\n            startRow: null,\r\n            startCol: null,\r\n            endRow: null,\r\n            endCol: null,\r\n            \r\n            showHelp: false,\r\n            searching: false,\r\n            tracking: false,\r\n            drawingWall: false,\r\n\r\n            savedRow: null,\r\n            savedCol: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.createGrid();\r\n\r\n        window.addEventListener('resize', this.createGrid);\r\n    }\r\n\r\n    createGrid = () => {\r\n        const width = window.innerWidth * 0.9;\r\n        const height = window.innerHeight * 0.8;\r\n\r\n        const ratio = width/height;\r\n\r\n        const noOfRows = Math.floor(height/37);\r\n        const noOfCols = Math.floor(noOfRows*ratio);\r\n\r\n        let startCol = Math.floor(noOfCols/2 - noOfCols/4)\r\n        let startRow = Math.floor(noOfRows/2)-1\r\n\r\n        let endCol = Math.floor(noOfCols/2 + noOfCols/4)\r\n        let endRow = Math.floor(noOfRows/2)-1\r\n\r\n\r\n        const grid = [];\r\n        for (let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            const row = []\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                const node = {\r\n                    row: rowIdx,\r\n                    col: nodeIdx,\r\n                    isStart: rowIdx === startRow && nodeIdx === startCol,\r\n                    isEnd: rowIdx === endRow && nodeIdx === endCol,\r\n                    isWall: false,\r\n                    isVisited: false,\r\n                    isPicked: false,\r\n                    parentRow: null,\r\n                    parentCol: null,\r\n                    isPath: false\r\n                }\r\n                row.push(node);\r\n            }\r\n            grid.push(row);\r\n        }\r\n\r\n        this.setState({\r\n            grid,\r\n            noOfRows,\r\n            noOfCols,     \r\n            startRow,\r\n            startCol,\r\n            endRow,\r\n            endCol       \r\n        })\r\n    } \r\n\r\n    reset = () => {\r\n        const {grid, noOfRows, noOfCols} = this.state;\r\n\r\n        for(let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                grid[rowIdx][nodeIdx].isWall = false;\r\n                grid[rowIdx][nodeIdx].isVisited = false;\r\n                grid[rowIdx][nodeIdx].isPath = false;\r\n                grid[rowIdx][nodeIdx].parentRow = null;\r\n                grid[rowIdx][nodeIdx].parentCol = null;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            grid,\r\n            searching: false,\r\n            drawingWall: false,\r\n        })\r\n    }\r\n\r\n    resetSearch = () => {\r\n        const {grid, noOfRows, noOfCols} = this.state;\r\n\r\n        for(let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                grid[rowIdx][nodeIdx].isVisited = false;\r\n                grid[rowIdx][nodeIdx].isPath = false;\r\n                grid[rowIdx][nodeIdx].parentRow = null;\r\n                grid[rowIdx][nodeIdx].parentCol = null;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            grid,\r\n        })\r\n    }\r\n\r\n    showHelp = () => {\r\n        this.setState({\r\n            showHelp: true\r\n        })\r\n    }\r\n\r\n    closeHelp = () => {\r\n        this.setState({\r\n            showHelp: false\r\n        })\r\n    }\r\n\r\n    isValidIndex = (row, col) => {\r\n        const {noOfRows, noOfCols} = this.state;\r\n\r\n        return (row >= 0 && row < noOfRows && col >= 0 && col < noOfCols)\r\n    }\r\n\r\n    startSearching = () => {\r\n        const {grid, startRow, startCol} = this.state;\r\n\r\n        this.setState({\r\n            searching: true\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.explore(grid, startRow, startCol);   \r\n        }, 0);\r\n    }\r\n\r\n    explore = (grid, fromRow, fromCol, parentRow=null, parentCol=null) => {\r\n\r\n        if (!this.isValidIndex(fromRow,fromCol)) return;\r\n\r\n        const currentNode = grid[fromRow][fromCol];\r\n\r\n        if (currentNode.isEnd) {\r\n            currentNode.parentRow = parentRow;\r\n            currentNode.parentCol = parentCol;\r\n            grid[fromRow][fromCol] = currentNode;\r\n            \r\n            this.setState({\r\n                grid,\r\n                searching : false\r\n            })\r\n            \r\n            if (this.state.tracking) return;\r\n            \r\n            this.track(currentNode.row, currentNode.col)\r\n            this.setState({\r\n                tracking: true\r\n            })\r\n            \r\n        }\r\n        \r\n        if (!this.state.searching || currentNode.isVisited || currentNode.isWall) return;\r\n\r\n        currentNode.isVisited = true;\r\n        currentNode.parentRow = parentRow;\r\n        currentNode.parentCol = parentCol;\r\n        grid[fromRow][fromCol] = currentNode;\r\n\r\n        this.setState({\r\n            grid\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.explore(grid, fromRow, fromCol+1, fromRow, fromCol);\r\n            this.explore(grid, fromRow+1, fromCol, fromRow, fromCol);\r\n            this.explore(grid, fromRow, fromCol-1, fromRow, fromCol);\r\n            this.explore(grid, fromRow-1, fromCol, fromRow, fromCol);            \r\n        }, 1);\r\n    }\r\n\r\n    track = (row, col) => {\r\n        const {grid} = this.state;\r\n        const path = []\r\n        while (!grid[row][col].isStart) {\r\n            path.unshift(grid[row][col]);\r\n            const parentRow = grid[row][col].parentRow;\r\n            const parentCol = grid[row][col].parentCol;\r\n            row = parentRow;\r\n            col = parentCol;\r\n        }\r\n\r\n        const travel = (grid, path, i) => {\r\n            if (i >= path.length-1) return;\r\n\r\n            const node = path[i];\r\n            const row = node.row;\r\n            const col = node.col;\r\n            const {startRow, startCol} = this.state;\r\n            \r\n            grid[startRow][startCol].isStart = false;\r\n            grid[row][col].isPath = false;\r\n            grid[row][col].isStart = true;\r\n\r\n            this.setState({\r\n                grid,\r\n                startRow: row,\r\n                startCol: col,\r\n            })\r\n            setTimeout(() => {\r\n                travel(grid, path, i+1)\r\n            }, 10);\r\n        }\r\n\r\n        const makePath = (grid, path, i) => {\r\n            if (i >= path.length) {\r\n                this.setState({\r\n                    tracking: false\r\n                })\r\n                travel(grid, path, 0);\r\n                return;\r\n            }\r\n\r\n            const node = path[i];\r\n            const row = node.row;\r\n            const col = node.col;\r\n            grid[row][col].isPath = true;\r\n            this.setState({\r\n                grid\r\n            })\r\n            setTimeout(() => {\r\n                makePath(grid, path, i+1)\r\n            }, 10);\r\n        }\r\n\r\n        let i = 0;\r\n        makePath(grid, path, i);\r\n    }\r\n\r\n    handleOnMouseUp = (row, col) => {\r\n        let {grid, startRow, startCol, savedRow, savedCol} = this.state;\r\n\r\n        this.setState({\r\n            drawingWall: false\r\n        })\r\n\r\n        if (savedRow === null || savedCol === null) return;\r\n        if (grid[row][col].isStart || grid[row][col].isEnd) return;\r\n        \r\n        grid[row][col].isStart = grid[savedRow][savedCol].isStart;\r\n        grid[row][col].isEnd = grid[savedRow][savedCol].isEnd;\r\n        grid[row][col].isWall = false;\r\n\r\n        if (grid[savedRow][savedCol].isStart) {\r\n            startRow = row;\r\n            startCol = col;\r\n        } \r\n\r\n        grid[savedRow][savedCol].isStart = false;\r\n        grid[savedRow][savedCol].isEnd = false;\r\n        grid[savedRow][savedCol].isPicked = false;\r\n\r\n        this.resetSearch();\r\n\r\n        this.setState({\r\n            grid,\r\n            startRow,\r\n            startCol,\r\n            savedRow: null,\r\n            savedCol: null\r\n        })   \r\n    }\r\n\r\n    handleOnMouseDown = (row, col) => {\r\n        const {grid, savedRow, savedCol} = this.state;\r\n\r\n        console.log(grid[row][col])\r\n\r\n\r\n        if (!grid[row][col].isStart && !grid[row][col].isEnd) {\r\n            grid[row][col].isWall = true;\r\n            grid[row][col].isVisited = false;\r\n            this.setState({\r\n                drawingWall: true\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (savedRow !== null || savedCol !== null) return;\r\n\r\n        grid[row][col].isPicked = true;\r\n        \r\n        this.setState({\r\n            grid,\r\n            savedRow: row,\r\n            savedCol: col\r\n        })\r\n    }\r\n\r\n    handleOnMouseEnter = (row, col) => {\r\n\r\n        const {grid, drawingWall} = this.state; \r\n\r\n        if (!drawingWall) return;\r\n\r\n        if (grid[row][col].isStart || grid[row][col].isEnd) return;\r\n\r\n        grid[row][col].isWall = true;\r\n        grid[row][col].isVisited = false;\r\n\r\n        this.setState({\r\n            grid\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {grid} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Help\r\n                    closeHelp={this.closeHelp}\r\n                    show={this.state.showHelp}\r\n                ></Help>\r\n\r\n                <Panel\r\n                    showHelp={this.showHelp}\r\n                    startSearching={this.startSearching}\r\n                    reset={this.reset}\r\n                ></Panel>\r\n                \r\n                <div className=\"node-group\">\r\n                    {\r\n                        grid.map((row, rowIdx) => (\r\n                            <div key={rowIdx} className=\"node-row\">{\r\n                            row.map((node, nodeIdx) => (\r\n                                <Node\r\n                                    {...node}\r\n                                    key={nodeIdx}\r\n                                    handleOnMouseUp={this.handleOnMouseUp}\r\n                                    handleOnMouseDown={this.handleOnMouseDown}\r\n                                    handleOnMouseEnter={this.handleOnMouseEnter}\r\n                                ></Node>\r\n                            ))}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\nimport Board from './components/Board'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}