{"version":3,"sources":["components/Help.jsx","components/Panel.jsx","components/Tile.jsx","components/Board.jsx","App.js","index.js"],"names":["Help","class","id","tabindex","aria-labelledby","aria-hidden","type","data-bs-dismiss","aria-label","Panel","className","Button","data-bs-toggle","data-bs-target","onClick","this","props","startSearching","reset","Component","Tile","picked","onMouseUp","handleNodeDrop","onMouseDown","handleNodePick","onMouseEnter","handleMouseEnter","Board","startNodeId","state","endNodeId","count","tiles","i","newTile","push","setState","found","selectedId","drawingWall","start","explore","current","visited","cols","includes","setTimeout","currentTileType","pickedType","map","tile","key","App","rows","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7844988.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Modal} from 'bootstrap';\r\n\r\nconst Help = () => {\r\n    return(\r\n        <div class=\"modal fade\" id=\"helpModal\" tabindex=\"-1\" aria-labelledby=\"helpModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h2 class=\"modal-title\" id=\"helpModalLabel\">Ripple</h2>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <h5>Move Tiles</h5>\r\n                        <p>Click and Drag Start or End Tile to move them to a new location.</p>\r\n                        <h5>Add Walls</h5>\r\n                        <p>Drag across blank spaces to create a wall.</p>\r\n                        <h5>Enjoy</h5>\r\n                        <p>Hit go to start the simulation.</p>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Help;","import React, {Component} from 'react';\r\nimport {Button} from 'react-bootstrap'\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n\r\n                <Button\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    data-bs-toggle=\"modal\"\r\n                    data-bs-target=\"#helpModal\"\r\n                >Help</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-success btn-lg\"\r\n                    onClick={this.props.startSearching}\r\n                >Go</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-secondary btn-lg\"\r\n                    onClick={this.props.reset}\r\n                >Reset</Button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;\r\n","import React, {Component} from 'react'\r\n\r\nclass Tile extends Component {\r\n    \r\n    render() {\r\n        const id = this.props.id;\r\n        const type = this.props.type;\r\n        const picked = this.props.picked;\r\n\r\n        let className = \"tile\";\r\n\r\n        if (type === \"start\") {\r\n            className += \" tile-start\";\r\n        }\r\n\r\n        else if (type === \"end\") {\r\n            className += \" tile-end\";\r\n        }\r\n\r\n        else if (type === \"empty\") {\r\n            className += \" tile-empty\";\r\n        }\r\n\r\n        else if (type === \"wall\") {\r\n            className += \" tile-wall\"\r\n        }\r\n\r\n        else if (type === \"visited\") {\r\n            className += \" tile-visited\";\r\n        }\r\n\r\n        if (picked) {\r\n            className += \" tile-picked\"\r\n        }\r\n\r\n        return(\r\n            <div\r\n                onMouseUp={() => this.props.handleNodeDrop(id)}\r\n                onMouseDown={() => this.props.handleNodePick(id)}\r\n                onMouseEnter={() => this.props.handleMouseEnter(id)}\r\n                className={className}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;","    import React, {Component} from 'react';\r\n    import Help from './Help'\r\n    import Panel from './Panel';\r\n    import Tile from './Tile';\r\n\r\n    class Board extends Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            \r\n            const count = this.props.count;\r\n            const startNodeId = 261;\r\n            const endNodeId = 278;\r\n\r\n            const tiles = [];\r\n            for (let i=0; i<count; i++) {\r\n                \r\n                const newTile = {\r\n                    id : i,\r\n                    type : \"empty\",\r\n                    picked : false\r\n                }\r\n\r\n                if (newTile.id === startNodeId) {\r\n                    newTile.type = \"start\"\r\n                }\r\n                if (newTile.id === endNodeId) {\r\n                    newTile.type = \"end\"\r\n                }\r\n\r\n                tiles.push(newTile);\r\n            }\r\n\r\n            this.state = {\r\n                count,\r\n                tiles,\r\n                found: false,\r\n                startNodeId,\r\n                endNodeId,\r\n                selectedId: null,\r\n                drawingWall: false,\r\n            }\r\n        }\r\n\r\n        reset = () => {\r\n\r\n            const startNodeId = this.state.startNodeId;\r\n            const endNodeId = this.state.endNodeId;\r\n            const count = this.state.count;\r\n            const tiles = [];\r\n            for (let i=0; i<count; i++) {\r\n                const newTile = {\r\n                    id : i,\r\n                    type : \"empty\",\r\n                    picked : false\r\n                }\r\n\r\n                if (newTile.id === startNodeId) {\r\n                    newTile.type = \"start\"\r\n                }\r\n                if (newTile.id === endNodeId) {\r\n                    newTile.type = \"end\"\r\n                }\r\n\r\n                tiles.push(newTile);\r\n            }\r\n\r\n            this.setState({\r\n                tiles,\r\n                found: false,\r\n                selectedId: null,\r\n                drawingWall: false,\r\n            })\r\n        }\r\n\r\n        startSearching = () => {\r\n            const tiles = this.state.tiles;\r\n            const start = this.state.startNodeId;\r\n\r\n            const visited = [];\r\n            this.explore(tiles, start, visited);        \r\n        }\r\n\r\n        explore = (tiles, current, visited) => {\r\n\r\n            const cols = this.props.cols;\r\n            const count = this.props.count;\r\n\r\n            if (current === this.state.endNodeId) {\r\n                this.setState({\r\n                    found : true\r\n                })\r\n            }\r\n            \r\n            if (this.state.found || visited.includes(current) || current < 0 || current >= count) {\r\n                return;\r\n            }\r\n\r\n            visited.push(current);\r\n\r\n            const type = tiles[current].type;\r\n            if (type === \"wall\") {\r\n                return;\r\n            }\r\n\r\n            if (type !== \"start\") {\r\n                tiles[current].type = \"visited\";\r\n            }\r\n\r\n            this.setState({\r\n                tiles\r\n            });\r\n\r\n            setTimeout(() => {\r\n                if ((current+1) % cols !== 0) {\r\n                    this.explore(tiles, current+1, visited);\r\n                }\r\n                if (current % cols !== 0) {\r\n                    this.explore(tiles, current-1, visited);\r\n                }\r\n\r\n                this.explore(tiles, current-cols, visited);\r\n                this.explore(tiles, current+cols, visited);\r\n            }, 1);\r\n        }\r\n\r\n        handleNodeDrop = (id) => {\r\n            this.setState({\r\n                drawingWall: false\r\n            })\r\n\r\n            const selectedId = this.state.selectedId;\r\n            this.setState({\r\n                selectedId: null\r\n            })\r\n\r\n            if (selectedId == null) {\r\n                return;\r\n            }\r\n\r\n            const tiles = this.state.tiles;\r\n            \r\n            tiles[selectedId].picked = false;\r\n\r\n            const currentTileType = tiles[id].type;\r\n            const movable = [\"start\", \"end\"]\r\n            if (movable.includes(currentTileType)) {\r\n                return;\r\n            }\r\n \r\n            let startNodeId = this.state.startNodeId;\r\n            let endNodeId = this.state.endNodeId;\r\n\r\n            const pickedType = tiles[selectedId].type;\r\n\r\n            tiles[id].type = pickedType;\r\n            tiles[selectedId].type = \"empty\";\r\n            tiles[selectedId].picked = false;\r\n\r\n            if (pickedType === \"start\") {\r\n                startNodeId = id;\r\n            }\r\n            else if (pickedType === \"end\") {\r\n                endNodeId = id;\r\n            }\r\n\r\n            this.setState({\r\n                tiles: tiles,\r\n                startNodeId : startNodeId,\r\n                endNodeId : endNodeId,\r\n            })\r\n        }\r\n\r\n        handleNodePick = (id) => {\r\n\r\n            const tiles = this.state.tiles;\r\n            const pickedType = tiles[id].type;\r\n\r\n            const movable = [\"start\", \"end\"];\r\n\r\n            if (pickedType === \"empty\" || pickedType === \"wall\") {\r\n                tiles[id].type = \"wall\";\r\n                this.setState({\r\n                    tiles,\r\n                    drawingWall: true\r\n                })\r\n            }\r\n\r\n            else if (movable.includes(pickedType)) {\r\n                tiles[id].picked = true;\r\n                this.setState({\r\n                    tiles,\r\n                    selectedId : id\r\n                })\r\n            }\r\n        }\r\n\r\n        handleMouseEnter = (id) => {\r\n            const drawingWall = this.state.drawingWall; \r\n            if (drawingWall === false) {\r\n                return;\r\n            }\r\n\r\n            const movable = [\"start\", \"end\"]\r\n            const tiles = this.state.tiles;\r\n            const type = tiles[id].type;\r\n            if (movable.includes(type)) {\r\n                return;\r\n            }\r\n\r\n            tiles[id].type = \"wall\";\r\n\r\n            this.setState({\r\n                tiles\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <Help />\r\n\r\n                    <Panel\r\n                        startSearching={this.startSearching}\r\n                        reset={this.reset}\r\n                    ></Panel>\r\n                    \r\n                    <div className=\"board\">\r\n                        {\r\n                            this.state.tiles.map( tile => <Tile \r\n                                {...tile} \r\n                                key={tile.id}\r\n                                handleNodeDrop={this.handleNodeDrop}\r\n                                handleNodePick={this.handleNodePick}\r\n                                handleMouseEnter={this.handleMouseEnter}\r\n                            ></Tile>)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    export default Board;","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\nimport Board from './components/Board'\r\n\r\nfunction App() {\r\n\r\n  const rows = 15;\r\n  const cols = 36;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board \r\n          rows={rows}\r\n          cols={cols}\r\n          count={rows*cols}\r\n      >\r\n      </Board>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}