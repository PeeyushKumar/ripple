{"version":3,"sources":["components/Help.jsx","components/Panel.jsx","components/Node.jsx","components/Board.jsx","App.js","index.js"],"names":["Help","props","Modal","show","onHide","closeHelp","size","aria-labelledby","centered","Header","Title","id","Body","Footer","Button","onClick","Panel","className","this","showHelp","startSearching","reset","Component","Node","row","col","isStart","isEnd","isWall","isVisited","isPicked","onMouseUp","handleOnMouseUp","onMouseDown","handleOnMouseDown","onMouseEnter","handleOnMouseEnter","Board","componentDidMount","createGrid","window","addEventListener","width","innerWidth","height","innerHeight","ratio","noOfRows","Math","floor","noOfCols","startCol","startRow","endCol","endRow","grid","rowIdx","nodeIdx","node","push","setState","state","found","drawingWall","isValidIndex","explore","fromRow","fromCol","currentNode","setTimeout","savedRow","savedCol","map","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fbc5200.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst Help = (props) => {\r\n    return(\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.closeHelp}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    <h2>Ripple</h2>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h4>Move Tiles</h4>\r\n                <p>Click and Drag Start or End Tile to move them to a new location.</p>\r\n                <h4>Add Walls</h4>\r\n                <p>Drag across blank spaces to create a wall.</p>\r\n                <h4>Enjoy</h4>\r\n                <p>Hit go to start the simulation.</p>\r\n            </Modal.Body>\r\n            \r\n            <Modal.Footer>\r\n                <Button onClick={props.closeHelp}>Close</Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Help;","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n\r\n                <Button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.showHelp}\r\n                >Help</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-success btn-xs-block\"\r\n                    onClick={this.props.startSearching}\r\n                >Go</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={this.props.reset}\r\n                >Reset</Button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;\r\n","import React, {Component} from 'react'\r\n\r\nclass Node extends Component {\r\n    \r\n    render() {\r\n        const {row, col, isStart, isEnd, isWall, isVisited, isPicked} = this.props;\r\n\r\n        let className = \"node\";\r\n\r\n        if (isStart) {\r\n            className += \" node-start\";\r\n        }\r\n        if (isEnd) {\r\n            className += \" node-end\";\r\n        }\r\n        if (isWall) {\r\n            className += \" node-wall\";\r\n        }\r\n        if (isVisited) {\r\n            className += \" node-visited\";\r\n        }\r\n        if (isPicked) {\r\n            className += \" node-picked\"\r\n        }\r\n\r\n        return(\r\n            <div\r\n                onMouseUp={() => this.props.handleOnMouseUp(row, col)}\r\n                onMouseDown={() => this.props.handleOnMouseDown(row, col)}\r\n                onMouseEnter={() => this.props.handleOnMouseEnter(row, col)}\r\n                className={className}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React, {Component} from 'react';\r\nimport Help from './Help'\r\nimport Panel from './Panel';\r\nimport Node from './Node';\r\n\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            grid: [[]],\r\n            noOfRows: null,\r\n            noOfCols: null,\r\n\r\n            startRow: null,\r\n            startCol: null,\r\n            endRow: null,\r\n            endCol: null,\r\n            \r\n            showHelp: false,\r\n            found: false,\r\n            drawingWall: false,\r\n\r\n            savedRow: null,\r\n            savedCol: null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.createGrid();\r\n\r\n        window.addEventListener('resize', this.createGrid);\r\n    }\r\n\r\n    createGrid = () => {\r\n        const width = window.innerWidth * 0.9;\r\n        const height = window.innerHeight * 0.8;\r\n\r\n        const ratio = width/height;\r\n\r\n        const noOfRows = Math.floor(height/25);\r\n        const noOfCols = Math.floor(noOfRows*ratio);\r\n\r\n        let startCol = Math.floor(noOfCols/2 - noOfCols/4)\r\n        let startRow = Math.floor(noOfRows/2)-1\r\n\r\n        let endCol = Math.floor(noOfCols/2 + noOfCols/4)\r\n        let endRow = Math.floor(noOfRows/2)-1\r\n\r\n\r\n        const grid = [];\r\n        for (let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            const row = []\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                const node = {\r\n                    row: rowIdx,\r\n                    col: nodeIdx,\r\n                    isStart: rowIdx === startRow && nodeIdx === startCol,\r\n                    isEnd: rowIdx === endRow && nodeIdx === endCol,\r\n                    isWall: false,\r\n                    isVisited: false,\r\n                    isPicked: false\r\n                }\r\n                row.push(node);\r\n            }\r\n            grid.push(row);\r\n        }\r\n\r\n        this.setState({\r\n            grid,\r\n            noOfRows,\r\n            noOfCols,     \r\n            startRow,\r\n            startCol,\r\n            endRow,\r\n            endCol       \r\n        })\r\n    } \r\n\r\n    reset = () => {\r\n        const {grid, noOfRows, noOfCols} = this.state;\r\n\r\n        for(let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                grid[rowIdx][nodeIdx].isWall = false;\r\n                grid[rowIdx][nodeIdx].isVisited = false;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            grid,\r\n            found: false,\r\n            drawingWall: false,\r\n        })\r\n    }\r\n\r\n    showHelp = () => {\r\n        this.setState({\r\n            showHelp: true\r\n        })\r\n    }\r\n\r\n    closeHelp = () => {\r\n        this.setState({\r\n            showHelp: false\r\n        })\r\n    }\r\n\r\n    isValidIndex = (row, col) => {\r\n        const {noOfRows, noOfCols} = this.state;\r\n\r\n        return (row >= 0 && row < noOfRows && col >= 0 && col < noOfCols)\r\n    }\r\n\r\n    startSearching = () => {\r\n        const {grid, startRow, startCol} = this.state;\r\n\r\n        this.explore(grid, startRow, startCol);        \r\n    }\r\n\r\n    explore = (grid, fromRow, fromCol) => {\r\n\r\n        if (!this.isValidIndex(fromRow,fromCol)) return;\r\n\r\n        const currentNode = grid[fromRow][fromCol];\r\n\r\n        if (currentNode.isEnd) {\r\n            this.setState({\r\n                found : true\r\n            })\r\n        }\r\n        \r\n        if (this.state.found || currentNode.isVisited || currentNode.isWall) return;\r\n\r\n        currentNode.isVisited = true;\r\n        grid[fromRow][fromCol] = currentNode;\r\n\r\n        this.setState({\r\n            grid\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.explore(grid, fromRow, fromCol+1);\r\n            this.explore(grid, fromRow+1, fromCol);\r\n            this.explore(grid, fromRow, fromCol-1);\r\n            this.explore(grid, fromRow-1, fromCol);            \r\n        }, 1);\r\n    }\r\n\r\n    handleOnMouseUp = (row, col) => {\r\n        let {grid, startRow, startCol, savedRow, savedCol} = this.state;\r\n\r\n        this.setState({\r\n            drawingWall: false\r\n        })\r\n\r\n        if (savedRow === null || savedCol === null) return;\r\n        if (grid[row][col].isStart || grid[row][col].isEnd) return;\r\n        \r\n        grid[row][col].isStart = grid[savedRow][savedCol].isStart;\r\n        grid[row][col].isEnd = grid[savedRow][savedCol].isEnd;\r\n\r\n        if (grid[savedRow][savedCol].isStart) {\r\n            startRow = row;\r\n            startCol = col;\r\n        } \r\n\r\n        grid[savedRow][savedCol].isStart = false;\r\n        grid[savedRow][savedCol].isEnd = false;\r\n        grid[savedRow][savedCol].isPicked = false;\r\n\r\n        this.setState({\r\n            grid,\r\n            startRow,\r\n            startCol,\r\n            savedRow: null,\r\n            savedCol: null\r\n        })   \r\n    }\r\n\r\n    handleOnMouseDown = (row, col) => {\r\n        const {grid, savedRow, savedCol} = this.state;\r\n\r\n        if (!grid[row][col].isStart && !grid[row][col].isEnd) {\r\n            grid[row][col].isWall = true;\r\n            grid[row][col].isVisited = false;\r\n            this.setState({\r\n                drawingWall: true\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (savedRow !== null || savedCol !== null) return;\r\n\r\n        grid[row][col].isPicked = true;\r\n        \r\n        this.setState({\r\n            grid,\r\n            savedRow: row,\r\n            savedCol: col\r\n        })\r\n    }\r\n\r\n    handleOnMouseEnter = (row, col) => {\r\n\r\n        const {grid, drawingWall} = this.state; \r\n\r\n        if (!drawingWall) return;\r\n\r\n        if (grid[row][col].isStart || grid[row][col].isEnd) return;\r\n\r\n        grid[row][col].isWall = true;\r\n        grid[row][col].isVisited = false;\r\n\r\n        this.setState({\r\n            grid\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {grid} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Help\r\n                    closeHelp={this.closeHelp}\r\n                    show={this.state.showHelp}\r\n                ></Help>\r\n\r\n                <Panel\r\n                    showHelp={this.showHelp}\r\n                    startSearching={this.startSearching}\r\n                    reset={this.reset}\r\n                ></Panel>\r\n                \r\n                <div className=\"node-group\">\r\n                    {\r\n                        grid.map((row, rowIdx) => (\r\n                            <div key={rowIdx} className=\"node-row\">{\r\n                            row.map((node, nodeIdx) => (\r\n                                <Node\r\n                                    {...node}\r\n                                    key={nodeIdx}\r\n                                    handleOnMouseUp={this.handleOnMouseUp}\r\n                                    handleOnMouseDown={this.handleOnMouseDown}\r\n                                    handleOnMouseEnter={this.handleOnMouseEnter}\r\n                                ></Node>\r\n                            ))}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\nimport Board from './components/Board'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}