{"version":3,"sources":["components/Help.jsx","components/Panel.jsx","components/Node.jsx","components/Board.jsx","App.js","index.js"],"names":["Help","props","Modal","show","onHide","closeHelp","size","aria-labelledby","centered","Header","Title","id","Body","Footer","Button","onClick","Panel","className","this","showHelp","startSearching","reset","Component","Node","row","col","isStart","isEnd","isWall","isVisited","isPath","movingStart","movingEnd","onDragStart","e","preventDefault","onMouseDown","handleOnMouseDown","onMouseEnter","handleOnMouseEnter","Board","componentDidMount","createGrid","window","addEventListener","startRow","startCol","endRow","endCol","width","innerWidth","height","innerHeight","ratio","noOfRows","Math","floor","noOfCols","grid","rowIdx","nodeIdx","node","parentRow","parentCol","push","setState","searching","tracking","getGrid","state","map","clearSearch","forEach","clearNode","isValidIndex","setTimeout","explore","fromRow","fromCol","currentNode","track","path","unshift","makePath","i","length","erazeNode","moveStart","moveEnd","makeWall","handleOnMouseUp","drawingWall","erazingWall","onContextMenu","onMouseUp","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0167095.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst Help = (props) => {\r\n    return(\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.closeHelp}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    <h2>Ripple</h2>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h4>Move Nodes</h4>\r\n                <p>Click and Drag Start or End Node to move them to a new location.</p>\r\n                <h4>Add Walls</h4>\r\n                <p>Drag across blank spaces to create a wall.</p>\r\n                <h4>Remove Walls</h4>\r\n                <p>Drag on walls to remove them.</p>\r\n                <h4>Enjoy</h4>\r\n                <p>Hit go to start the simulation.</p>\r\n            </Modal.Body>\r\n            \r\n            <Modal.Footer>\r\n                <Button onClick={props.closeHelp}>Close</Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Help;","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n\r\n                <Button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.showHelp}\r\n                >Help</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-success btn-xs-block\"\r\n                    onClick={this.props.startSearching}\r\n                >Go</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={this.props.reset}\r\n                >Reset</Button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;\r\n","import React, {Component} from 'react'\r\n\r\nclass Node extends Component {\r\n    \r\n    render() {\r\n        const {row, col, isStart, isEnd, isWall, isVisited, isPath, movingStart, movingEnd} = this.props;\r\n\r\n        let className=\"node\";\r\n\r\n        if (isStart) {\r\n            className += \" node-start\";\r\n            if (movingStart) className += \" node-moving\";\r\n        }\r\n        \r\n        if (isEnd) {\r\n            className += \" node-end\";\r\n            if (movingEnd) className += \" node-moving\";\r\n        }\r\n        \r\n        if (isWall) className += \" node-wall\";\r\n            \r\n        if (isVisited) className += \" node-visited\";\r\n\r\n        if (isPath) className += \" node-path\";\r\n\r\n        return(\r\n            <div\r\n                className=\"node-container\"\r\n                onDragStart={(e) => {e.preventDefault()}}\r\n                onMouseDown={() => this.props.handleOnMouseDown(row, col)}\r\n                onMouseEnter={() => this.props.handleOnMouseEnter(row, col)}\r\n            >\r\n                <div className={className}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React, {Component} from 'react';\r\nimport Help from './Help'\r\nimport Panel from './Panel';\r\nimport Node from './Node';\r\n\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            grid: null,\r\n            noOfRows: null,\r\n            noOfCols: null,\r\n\r\n            startRow: null,\r\n            startCol: null,\r\n            endRow: null,\r\n            endCol: null,\r\n            \r\n            showHelp: false,\r\n            searching: false,\r\n            tracking: false,\r\n            drawingWall: false,\r\n            erazingWall: false,\r\n            movingStart: false,\r\n            movingEnd: false,   \r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.createGrid();\r\n\r\n        window.addEventListener('resize', this.createGrid);\r\n    }\r\n\r\n    createGrid = (startRow=null, startCol=null, endRow=null, endCol=null) => {\r\n\r\n        const width = window.innerWidth * 0.9;\r\n        const height = window.innerHeight * 0.8;\r\n\r\n        const ratio = width/height;\r\n\r\n        const noOfRows = Math.floor(height/37);\r\n        const noOfCols = Math.floor(noOfRows*ratio);\r\n\r\n\r\n        if (!(startRow && startCol && endRow && endCol)) {\r\n            startCol = Math.floor(noOfCols/2 - noOfCols/4)\r\n            startRow = Math.floor(noOfRows/2)-1\r\n    \r\n            endCol = Math.floor(noOfCols/2 + noOfCols/4)\r\n            endRow = Math.floor(noOfRows/2)-1\r\n        }\r\n\r\n        const grid = [];\r\n        for (let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            const row = []\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                const node = {\r\n                    row: rowIdx,\r\n                    col: nodeIdx,\r\n                    isStart: rowIdx === startRow && nodeIdx === startCol,\r\n                    isEnd: rowIdx === endRow && nodeIdx === endCol,\r\n                    isWall: false,\r\n                    isVisited: false,\r\n                    isPath: false,\r\n                    parentRow: null,\r\n                    parentCol: null,\r\n                }\r\n                row.push(node);\r\n            }\r\n            grid.push(row);\r\n        }\r\n\r\n        this.setState({\r\n            grid,\r\n            noOfRows,\r\n            noOfCols,     \r\n            startRow,\r\n            startCol,\r\n            endRow,\r\n            endCol,\r\n            searching: false,\r\n            tracking: false\r\n        })\r\n    } \r\n\r\n    getGrid = () => this.state.grid.map(row => row.map(node => ({...node})));\r\n\r\n    reset = () => {\r\n        const {startRow, startCol, endRow, endCol} = this.state;\r\n        this.createGrid(startRow, startCol, endRow, endCol);\r\n    }\r\n\r\n    clearSearch = (grid) => grid.forEach(row => row.forEach(node => this.clearNode(grid, node.row, node.col)));\r\n\r\n    showHelp = () => {\r\n        this.setState({\r\n            showHelp: true\r\n        })\r\n    }\r\n\r\n    closeHelp = () => {\r\n        this.setState({\r\n            showHelp: false\r\n        })\r\n    }\r\n\r\n    isValidIndex = (row, col) => {\r\n        const {noOfRows, noOfCols} = this.state;\r\n\r\n        return (row >= 0 && row < noOfRows && col >= 0 && col < noOfCols)\r\n    }\r\n\r\n    startSearching = () => {\r\n        const {grid, startRow, startCol} = this.state;\r\n\r\n        this.setState({\r\n            searching: true\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.explore(grid, startRow, startCol);   \r\n        }, 0);\r\n    }\r\n\r\n    explore = (grid, fromRow, fromCol, parentRow=null, parentCol=null) => {\r\n\r\n        if (!this.isValidIndex(fromRow,fromCol)) return;\r\n\r\n        const currentNode = grid[fromRow][fromCol];\r\n\r\n        if (currentNode.isEnd) {\r\n            currentNode.parentRow = parentRow;\r\n            currentNode.parentCol = parentCol;\r\n            grid[fromRow][fromCol] = currentNode;\r\n            \r\n            this.setState({\r\n                grid,\r\n                searching : false\r\n            })\r\n            \r\n            if (this.state.tracking) return;\r\n            \r\n            this.track(currentNode.row, currentNode.col)\r\n            this.setState({\r\n                tracking: true\r\n            })\r\n            \r\n        }\r\n        \r\n        if (!this.state.searching || currentNode.isVisited || currentNode.isWall) return;\r\n\r\n        currentNode.isVisited = true;\r\n        currentNode.parentRow = parentRow;\r\n        currentNode.parentCol = parentCol;\r\n        grid[fromRow][fromCol] = currentNode;\r\n\r\n        this.setState({\r\n            grid\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.explore(grid, fromRow, fromCol+1, fromRow, fromCol);        \r\n        }, 10);\r\n        setTimeout(() => {\r\n            this.explore(grid, fromRow+1, fromCol, fromRow, fromCol);\r\n        }, 10);\r\n        setTimeout(() => {\r\n            this.explore(grid, fromRow, fromCol-1, fromRow, fromCol);\r\n        }, 10);\r\n        setTimeout(() => {\r\n            this.explore(grid, fromRow-1, fromCol, fromRow, fromCol);            \r\n        }, 10);\r\n\r\n    }\r\n\r\n    track = (row, col) => {\r\n        const {grid} = this.state;\r\n        const path = []\r\n        while (!grid[row][col].isStart) {\r\n            const parentRow = grid[row][col].parentRow;\r\n            const parentCol = grid[row][col].parentCol;\r\n            row = parentRow;\r\n            col = parentCol;\r\n            path.unshift(grid[row][col]);\r\n        }\r\n\r\n        const makePath = (grid, path, i) => {\r\n            if (i >= path.length) {\r\n                this.setState({\r\n                    tracking: false\r\n                })\r\n                return;\r\n            }\r\n\r\n            if (!this.state.tracking) return;\r\n\r\n            const node = path[i];\r\n            const row = node.row;\r\n            const col = node.col;\r\n            grid[row][col].isPath = true;\r\n            this.setState({\r\n                grid\r\n            })\r\n            setTimeout(() => {\r\n                makePath(grid, path, i+1)\r\n            }, 15);\r\n        }\r\n\r\n        this.setState({\r\n            tracking: true\r\n        })\r\n\r\n        makePath(grid, path, 1);\r\n    }\r\n\r\n    erazeNode = (grid, row, col) => {\r\n        this.clearNode(grid, row, col)\r\n        grid[row][col].isStart = false;\r\n        grid[row][col].isEnd = false;\r\n        grid[row][col].isWall = false;   \r\n    }\r\n\r\n    clearNode = (grid, row, col) => {\r\n        grid[row][col].isVisited = false;        \r\n        grid[row][col].isPath = false;\r\n        grid[row][col].parentRow = null;\r\n        grid[row][col].parentCol = null;\r\n    }\r\n\r\n    moveStart = (grid, row, col) => {\r\n        const {startRow, startCol} = this.state;\r\n\r\n        this.erazeNode(grid, startRow, startCol);\r\n        this.erazeNode(grid, row, col);\r\n        grid[row][col].isStart = true;\r\n    }\r\n\r\n    moveEnd = (grid, row, col) => {\r\n        const {endRow, endCol} = this.state;\r\n\r\n        this.erazeNode(grid, endRow, endCol);\r\n        this.erazeNode(grid, row, col);\r\n        grid[row][col].isEnd = true;\r\n    }\r\n\r\n    makeWall = (grid, row, col) => {\r\n        this.erazeNode(grid, row, col);\r\n        grid[row][col].isWall = true;\r\n    }\r\n\r\n    handleOnMouseUp = () => {\r\n        this.setState({\r\n            drawingWall: false,\r\n            movingStart: false,\r\n            movingEnd: false,\r\n            erazingWall: false\r\n        })\r\n    }\r\n\r\n    handleOnMouseDown = (row, col) => {\r\n        let {drawingWall, erazingWall, movingStart, movingEnd} = this.state;\r\n        const grid = this.getGrid();\r\n\r\n        if (grid[row][col].isStart) {\r\n            if (!drawingWall && !erazingWall && !movingEnd) {\r\n                movingStart = true;\r\n            }  \r\n        }\r\n\r\n        else if (grid[row][col].isEnd) {\r\n            if (!drawingWall && !erazingWall && !movingStart) {\r\n                movingEnd = true;\r\n            }\r\n        }\r\n\r\n        else if (grid[row][col].isWall) {\r\n            if (!drawingWall && !movingStart && !movingEnd) {\r\n                this.erazeNode(grid, row, col);\r\n                erazingWall = true;\r\n            }\r\n        }\r\n\r\n        else {\r\n            if (!erazingWall && !movingStart && !movingEnd) {\r\n                this.makeWall(grid, row, col)\r\n                drawingWall = true;\r\n            }\r\n        }\r\n\r\n        this.clearSearch(grid)\r\n\r\n        this.setState({\r\n            grid,\r\n            movingStart,\r\n            movingEnd,\r\n            drawingWall,\r\n            erazingWall,\r\n            searching: false,\r\n            tracking: false\r\n        })\r\n    }\r\n\r\n    handleOnMouseEnter = (row, col) => {\r\n\r\n        let {startRow, startCol, endRow, endCol, movingStart, movingEnd, drawingWall, erazingWall} = this.state; \r\n        const grid = this.getGrid();\r\n        \r\n        if (grid[row][col].isStart || grid[row][col].isEnd) return;\r\n\r\n        else if (grid[row][col].isWall) {\r\n            if (erazingWall) this.erazeNode(grid, row, col);\r\n        }\r\n\r\n        else if (movingStart) {\r\n            this.moveStart(grid, row, col);\r\n            startRow = row;\r\n            startCol = col;\r\n        }\r\n\r\n        else if (movingEnd) {\r\n            this.moveEnd(grid, row, col);\r\n            endRow = row;\r\n            endCol = col;\r\n        }\r\n\r\n        else if (drawingWall) this.makeWall(grid, row, col);\r\n\r\n        this.setState({\r\n            grid,\r\n            startRow,\r\n            startCol,\r\n            endRow,\r\n            endCol\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {grid} = this.state;\r\n\r\n        return (\r\n            <div \r\n                onContextMenu={e => e.preventDefault()}\r\n                onMouseUp={this.handleOnMouseUp}\r\n                className=\"board\"\r\n            >\r\n                <Help\r\n                    closeHelp={this.closeHelp}\r\n                    show={this.state.showHelp}\r\n                ></Help>\r\n\r\n                <Panel\r\n                    showHelp={this.showHelp}\r\n                    startSearching={this.startSearching}\r\n                    reset={this.reset}\r\n                ></Panel>\r\n\r\n                {\r\n                    this.state.grid === null ?\r\n                    'Loading...' :\r\n                    <div className=\"node-group\">\r\n                    {\r\n                        grid.map((row, rowIdx) => (\r\n                            <div key={rowIdx} className=\"node-row\">{\r\n                                row.map((node, nodeIdx) => (\r\n                                    <Node\r\n                                        {...node}\r\n                                        key={nodeIdx}\r\n                                        movingStart={this.state.movingStart}\r\n                                        movingEnd={this.state.movingEnd}\r\n                                        handleOnMouseDown={this.handleOnMouseDown}\r\n                                        handleOnMouseEnter={this.handleOnMouseEnter}\r\n                                    ></Node>\r\n                                ))}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\nimport Board from './components/Board'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board onDragStart={(e) => {e.preventDefault()}} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}