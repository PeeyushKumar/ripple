{"version":3,"sources":["components/Help.jsx","components/Panel.jsx","components/Tile.jsx","components/Board.jsx","App.js","index.js"],"names":["Help","props","Modal","show","onHide","closeHelp","size","aria-labelledby","centered","Header","Title","id","Body","Footer","Button","onClick","Panel","className","this","showHelp","startSearching","reset","Component","Tile","type","picked","onMouseUp","handleNodeDrop","onMouseDown","handleNodePick","onMouseEnter","handleMouseEnter","Board","state","startNodeId","endNodeId","noOfTiles","tiles","i","newTile","push","setState","found","pickedId","drawingWall","explore","current","visited","cols","includes","setTimeout","currentTileType","pickedType","map","tile","key","App","rows","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d22f996.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst Help = (props) => {\r\n    return(\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.closeHelp}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    <h2>Ripple</h2>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <h4>Move Tiles</h4>\r\n                <p>Click and Drag Start or End Tile to move them to a new location.</p>\r\n                <h4>Add Walls</h4>\r\n                <p>Drag across blank spaces to create a wall.</p>\r\n                <h4>Enjoy</h4>\r\n                <p>Hit go to start the simulation.</p>\r\n            </Modal.Body>\r\n            \r\n            <Modal.Footer>\r\n                <Button onClick={props.closeHelp}>Close</Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Help;","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n\r\n                <Button\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    onClick={this.props.showHelp}\r\n                >Help</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-success btn-lg\"\r\n                    onClick={this.props.startSearching}\r\n                >Go</Button>\r\n\r\n                <Button\r\n                    className=\"btn btn-secondary btn-lg\"\r\n                    onClick={this.props.reset}\r\n                >Reset</Button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;\r\n","import React, {Component} from 'react'\r\n\r\nclass Tile extends Component {\r\n    \r\n    render() {\r\n        const {id, type, picked} = this.props;\r\n\r\n        let className = \"tile\";\r\n\r\n        switch(type) {\r\n            case \"start\":\r\n                className += \" tile-start\";\r\n                break;\r\n            case \"end\":\r\n                className += \" tile-end\";\r\n                break;\r\n            case \"empty\":\r\n                className += \" tile-empty\";\r\n                break;\r\n            case \"wall\":\r\n                className += \" tile-wall\";\r\n                break;\r\n            case \"visited\":\r\n                className += \" tile-visited\";\r\n                break;\r\n            default:\r\n                //do nothing\r\n        }\r\n\r\n        if (picked) {\r\n            className += \" tile-picked\"\r\n        }\r\n\r\n        return(\r\n            <div\r\n                onMouseUp={() => this.props.handleNodeDrop(id)}\r\n                onMouseDown={() => this.props.handleNodePick(id)}\r\n                onMouseEnter={() => this.props.handleMouseEnter(id)}\r\n                className={className}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;","import React, {Component} from 'react';\r\nimport Help from './Help'\r\nimport Panel from './Panel';\r\nimport Tile from './Tile';\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        const noOfTiles = this.props.noOfTiles;\r\n        const startNodeId = 261;\r\n        const endNodeId = 278;\r\n\r\n        const tiles = [];\r\n        for (let i=0; i<noOfTiles; i++) {\r\n            \r\n            const newTile = {\r\n                id : i,\r\n                type : \"empty\",\r\n                picked : false\r\n            }\r\n\r\n            if (newTile.id === startNodeId) {\r\n                newTile.type = \"start\"\r\n            }\r\n            if (newTile.id === endNodeId) {\r\n                newTile.type = \"end\"\r\n            }\r\n\r\n            tiles.push(newTile);\r\n        }\r\n\r\n        this.state = {\r\n            noOfTiles,\r\n            tiles,\r\n            showHelp: true,\r\n            found: false,\r\n            startNodeId,\r\n            endNodeId,\r\n            pickedId: null,\r\n            drawingWall: false,\r\n        }\r\n    }\r\n\r\n    reset = () => {\r\n\r\n        const {startNodeId, endNodeId, noOfTiles} = this.state;\r\n\r\n        const tiles = [];\r\n        for (let i=0; i<noOfTiles; i++) {\r\n            const newTile = {\r\n                id : i,\r\n                type : \"empty\",\r\n                picked : false\r\n            }\r\n\r\n            if (newTile.id === startNodeId) {\r\n                newTile.type = \"start\"\r\n            }\r\n            if (newTile.id === endNodeId) {\r\n                newTile.type = \"end\"\r\n            }\r\n\r\n            tiles.push(newTile);\r\n        }\r\n\r\n        this.setState({\r\n            tiles,\r\n            found: false,\r\n            pickedId: null,\r\n            drawingWall: false,\r\n        })\r\n    }\r\n\r\n    showHelp = () => {\r\n        this.setState({\r\n            showHelp: true\r\n        })\r\n    }\r\n\r\n    closeHelp = () => {\r\n        this.setState({\r\n            showHelp: false\r\n        })\r\n    }\r\n\r\n    startSearching = () => {\r\n        const {tiles, startNodeId} = this.state;\r\n\r\n        const visited = [];\r\n        this.explore(tiles, startNodeId, visited);        \r\n    }\r\n\r\n    explore = (tiles, current, visited) => {\r\n\r\n        const cols = this.props.cols;\r\n        const noOfTiles = this.props.noOfTiles;\r\n\r\n        if (current === this.state.endNodeId) {\r\n            this.setState({\r\n                found : true\r\n            })\r\n        }\r\n        \r\n        if (this.state.found || visited.includes(current) || current < 0 || current >= noOfTiles) {\r\n            return;\r\n        }\r\n\r\n        visited.push(current);\r\n\r\n        const type = tiles[current].type;\r\n        if (type === \"wall\") {\r\n            return;\r\n        }\r\n\r\n        if (type !== \"start\") {\r\n            tiles[current].type = \"visited\";\r\n        }\r\n\r\n        this.setState({\r\n            tiles\r\n        });\r\n\r\n        setTimeout(() => {\r\n            if ((current+1) % cols !== 0) {\r\n                this.explore(tiles, current+1, visited);\r\n            }\r\n            if (current % cols !== 0) {\r\n                this.explore(tiles, current-1, visited);\r\n            }\r\n\r\n            this.explore(tiles, current-cols, visited);\r\n            this.explore(tiles, current+cols, visited);\r\n        }, 1);\r\n    }\r\n\r\n    handleNodeDrop = (id) => {\r\n        this.setState({\r\n            drawingWall: false\r\n        })\r\n\r\n        const pickedId = this.state.pickedId;\r\n        this.setState({\r\n            pickedId: null\r\n        })\r\n\r\n        if (pickedId == null) {\r\n            return;\r\n        }\r\n\r\n        const tiles = this.state.tiles;\r\n        \r\n        tiles[pickedId].picked = false;\r\n\r\n        const currentTileType = tiles[id].type;\r\n        const movable = [\"start\", \"end\"]\r\n        if (movable.includes(currentTileType)) {\r\n            return;\r\n        }\r\n\r\n        let startNodeId = this.state.startNodeId;\r\n        let endNodeId = this.state.endNodeId;\r\n\r\n        const pickedType = tiles[pickedId].type;\r\n\r\n        tiles[id].type = pickedType;\r\n        tiles[pickedId].type = \"empty\";\r\n        tiles[pickedId].picked = false;\r\n\r\n        if (pickedType === \"start\") {\r\n            startNodeId = id;\r\n        }\r\n        else if (pickedType === \"end\") {\r\n            endNodeId = id;\r\n        }\r\n\r\n        this.setState({\r\n            tiles: tiles,\r\n            startNodeId : startNodeId,\r\n            endNodeId : endNodeId,\r\n        })\r\n    }\r\n\r\n    handleNodePick = (id) => {\r\n\r\n        const tiles = this.state.tiles;\r\n        const pickedType = tiles[id].type;\r\n\r\n        const movable = [\"start\", \"end\"];\r\n\r\n        if (pickedType === \"empty\" || pickedType === \"wall\") {\r\n            tiles[id].type = \"wall\";\r\n            this.setState({\r\n                tiles,\r\n                drawingWall: true\r\n            })\r\n        }\r\n\r\n        else if (movable.includes(pickedType)) {\r\n            tiles[id].picked = true;\r\n            this.setState({\r\n                tiles,\r\n                pickedId : id\r\n            })\r\n        }\r\n    }\r\n\r\n    handleMouseEnter = (id) => {\r\n        const drawingWall = this.state.drawingWall; \r\n        if (drawingWall === false) {\r\n            return;\r\n        }\r\n\r\n        const movable = [\"start\", \"end\"]\r\n        const tiles = this.state.tiles;\r\n        const type = tiles[id].type;\r\n        if (movable.includes(type)) {\r\n            return;\r\n        }\r\n\r\n        tiles[id].type = \"wall\";\r\n\r\n        this.setState({\r\n            tiles\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Help\r\n                    closeHelp={this.closeHelp}\r\n                    show={this.state.showHelp}\r\n                ></Help>\r\n\r\n                <Panel\r\n                    showHelp={this.showHelp}\r\n                    startSearching={this.startSearching}\r\n                    reset={this.reset}\r\n                ></Panel>\r\n                \r\n                <div className=\"tile-group\">\r\n                    {\r\n                        this.state.tiles.map( tile => <Tile \r\n                            {...tile} \r\n                            key={tile.id}\r\n                            handleNodeDrop={this.handleNodeDrop}\r\n                            handleNodePick={this.handleNodePick}\r\n                            handleMouseEnter={this.handleMouseEnter}\r\n                        ></Tile>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\nimport Board from './components/Board'\r\n\r\nfunction App() {\r\n\r\n  const rows = 15;\r\n  const cols = 36;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board \r\n          rows={rows}\r\n          cols={cols}\r\n          noOfTiles={rows*cols}\r\n      >\r\n      </Board>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}