{"version":3,"sources":["components/Tile.jsx","components/Board.jsx","App.js","index.js"],"names":["Tile","id","this","props","color","className","onClick","handleClick","Component","Board","clickedId","tiles","state","changeNeighbours","idToChange","visited","cols","count","includes","push","change","setState","setTimeout","i","newProps","map","tile","key","App","rows","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAsBeA,E,4JAnBX,WAAU,IAAD,OACCC,EAAKC,KAAKC,MAAMF,GAChBG,EAAQF,KAAKC,MAAMC,MAErBC,EAAY,OAGhB,OAFAA,GAAa,SAAWD,EAGpB,wBACIE,QAAS,WACLD,GAAa,UACb,EAAKF,MAAMI,YAAYN,IAE3BI,UAAWA,Q,GAdRG,aC6EAC,E,kDA1EX,WAAYN,GAAQ,IAAD,uBACf,cAAMA,IAkBVI,YAAc,SAACG,GACX,IAAMC,EAAQ,EAAKC,MAAMD,MAEzB,EAAKE,iBAAiBF,EAAOD,EADb,KArBD,EAyBnBG,iBAAmB,SAACF,EAAOG,EAAYC,GAEnC,IAAMC,EAAO,EAAKb,MAAMa,KAClBC,EAAQ,EAAKd,MAAMc,MAErBF,EAAQG,SAASJ,IAAeA,EAAa,GAAKA,GAAcG,IAIpEF,EAAQI,KAAKL,GACb,EAAKM,OAAOT,EAAOG,GACnB,EAAKO,SAASV,GACdW,YAAW,YAEFR,EAAW,GAAKE,IAAS,GAC1B,EAAKH,iBAAiBF,EAAOG,EAAW,EAAGC,GAE3CD,EAAaE,IAAS,GACtB,EAAKH,iBAAiBF,EAAOG,EAAW,EAAGC,GAG/C,EAAKF,iBAAiBF,EAAOG,EAAWE,EAAMD,GAC9C,EAAKF,iBAAiBF,EAAOG,EAAWE,EAAMD,KAC/C,MAhDY,EAmDnBK,OAAS,SAACT,EAAOG,GACmB,SAA5BH,EAAMG,GAAYV,MAClBO,EAAMG,GAAYV,MAAQ,MAE1BO,EAAMG,GAAYV,MAAQ,QAjD9B,IAHA,IAAMa,EAAQ,EAAKd,MAAMc,MAEnBN,EAAQ,GACLY,EAAE,EAAGA,EAAEN,EAAOM,IAAK,CACxB,IAAMC,EAAW,CACbvB,GAAKsB,EACLnB,MAAQ,QAEZO,EAAMQ,KAAKK,GAXA,OAcf,EAAKZ,MAAQ,CACTD,SAfW,E,0CA2DnB,WAAU,IAAD,OACL,OACI,qBAAKN,UAAU,QAAf,SAEQH,KAAKU,MAAMD,MAAMc,KAAK,SAAAC,GAAI,OAAI,wBAAC,EAAD,2BACtBA,GADsB,IAE1BC,IAAKD,EAAKzB,GACVM,YAAa,EAAKA,wB,GApEtBC,aCiBToB,MAjBf,WAKE,OACE,qBAAKvB,UAAU,MAAf,SACE,cAAC,EAAD,CACIwB,KANK,GAOLb,KANK,GAOLC,MAAOY,SCRjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.84906a54.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Tile extends Component {\r\n    render() {\r\n        const id = this.props.id;\r\n        const color = this.props.color;\r\n\r\n        let className = \"tile\";\r\n        className += \" tile-\" + color;\r\n            \r\n        return(\r\n            <button\r\n                onClick={() => {\r\n                    className += \" bounce\"\r\n                    this.props.handleClick(id)\r\n                }}\r\n                className={className}\r\n            ></button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;","    import React, {Component} from 'react';\r\n    import Tile from './Tile'\r\n\r\n    class Board extends Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            \r\n            const count = this.props.count;\r\n\r\n            const tiles = [];\r\n            for (let i=0; i<count; i++) {\r\n                const newProps = {\r\n                    id : i,\r\n                    color : 'cyan',\r\n                }\r\n                tiles.push(newProps);\r\n            }\r\n\r\n            this.state = {\r\n                tiles\r\n            }\r\n        }\r\n\r\n        handleClick = (clickedId) => {\r\n            const tiles = this.state.tiles;\r\n            const visited = [];\r\n            this.changeNeighbours(tiles, clickedId, visited);        \r\n        }\r\n\r\n        changeNeighbours = (tiles, idToChange, visited) => {\r\n\r\n            const cols = this.props.cols;\r\n            const count = this.props.count;\r\n\r\n            if (visited.includes(idToChange) || idToChange < 0 || idToChange >= count) {\r\n                return;\r\n            }\r\n\r\n            visited.push(idToChange);\r\n            this.change(tiles, idToChange);\r\n            this.setState(tiles);\r\n            setTimeout(() => {\r\n                \r\n                if ((idToChange+1) % cols !== 0) {\r\n                    this.changeNeighbours(tiles, idToChange+1, visited);\r\n                }\r\n                if (idToChange % cols !== 0) {\r\n                    this.changeNeighbours(tiles, idToChange-1, visited);\r\n                }\r\n\r\n                this.changeNeighbours(tiles, idToChange-cols, visited);\r\n                this.changeNeighbours(tiles, idToChange+cols, visited);\r\n            }, 10);\r\n        }\r\n\r\n        change = (tiles, idToChange) => {\r\n            if (tiles[idToChange].color === 'cyan') {\r\n                tiles[idToChange].color = 'red'\r\n            } else {\r\n                tiles[idToChange].color = 'cyan'\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div className=\"board\">\r\n                    {\r\n                        this.state.tiles.map( tile => <Tile \r\n                            {...tile} \r\n                            key={tile.id}\r\n                            handleClick={this.handleClick}\r\n                        ></Tile>)\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    export default Board;","import './App.css';\r\nimport Board from './components/Board'\r\n\r\nfunction App() {\r\n\r\n  const rows = 10;\r\n  const cols = 20;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Board \r\n          rows={rows}\r\n          cols={cols}\r\n          count={rows*cols}\r\n      >\r\n      </Board>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}